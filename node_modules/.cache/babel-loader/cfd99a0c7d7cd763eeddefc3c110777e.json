{"ast":null,"code":"var _jsxFileName = \"/home/brenner/Documentos/PERSONAL_PROJECTS_PAGES/DIO/BOOTCAMP_EDUZZ/PROJETO_GITHUB_API_INTERFACE/GitHub_Api_Interface_By_DIO/githube-api/src/components/Repositories/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useGitHub } from '../../hooks/github_hooks';\nimport { RepositoryItem } from '../Repository_item';\nimport * as S from './styled';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Repositories = () => {\n  _s();\n\n  const {\n    gitHubState,\n    getUserRepos,\n    getUserStarred\n  } = useGitHub();\n  const [hasUserForSearchRepos, setHasUserForSearchRepos] = useState(false);\n  useEffect(() => {\n    if (gitHubState.user.login) {\n      getUserRepos(gitHubState.user.login);\n      getUserStarred(gitHubState.user.login);\n    }\n\n    setHasUserForSearchRepos(gitHubState.repositories);\n  }, [gitHubState.user.login]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: hasUserForSearchRepos ? /*#__PURE__*/_jsxDEV(S.WrapperTabs, {\n      // react-tab-npm faz ser exibida qual tab foi clicada Repositories || Starred; \n      selectedTabClassName: \"is-selected\",\n      selectedTabPanelClassName: \"is-selected\",\n      children: [/*#__PURE__*/_jsxDEV(S.WrapperTabList, {\n        children: [/*#__PURE__*/_jsxDEV(S.WrapperTab, {\n          children: \"Repositories\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(S.WrapperTab, {\n          children: \"Starred\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(S.WrapperTabPanel, {\n        children: /*#__PURE__*/_jsxDEV(S.WrapperList, {\n          children: gitHubState.repositories.map(item => /*#__PURE__*/_jsxDEV(RepositoryItem, {\n            name: item.name,\n            linkToRepo: item.full_name,\n            fullName: item.full_name\n          }, item.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(S.WrapperTabPanel, {\n        children: /*#__PURE__*/_jsxDEV(S.WrapperList, {\n          children: gitHubState.starred.map(item => /*#__PURE__*/_jsxDEV(RepositoryItem, {\n            name: item.name,\n            linkToRepo: item.html_url,\n            fullName: item.full_name\n          }, item.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n  }, void 0, false);\n};\n\n_s(Repositories, \"LCq5ZobJumiPU6QNpM7KOfqQZ9Q=\", false, function () {\n  return [useGitHub];\n});\n\n_c = Repositories;\n\nvar _c;\n\n$RefreshReg$(_c, \"Repositories\");","map":{"version":3,"sources":["/home/brenner/Documentos/PERSONAL_PROJECTS_PAGES/DIO/BOOTCAMP_EDUZZ/PROJETO_GITHUB_API_INTERFACE/GitHub_Api_Interface_By_DIO/githube-api/src/components/Repositories/index.js"],"names":["React","useEffect","useState","useGitHub","RepositoryItem","S","Repositories","gitHubState","getUserRepos","getUserStarred","hasUserForSearchRepos","setHasUserForSearchRepos","user","login","repositories","map","item","name","full_name","id","starred","html_url"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,SAASC,SAAT,QAA0B,0BAA1B;AACA,SAASC,cAAT,QAA+B,oBAA/B;AACA,OAAO,KAAKC,CAAZ,MAAmB,UAAnB;;;AAGA,OAAO,MAAMC,YAAY,GAAG,MAAM;AAAA;;AAChC,QAAM;AAAEC,IAAAA,WAAF;AAAeC,IAAAA,YAAf;AAA6BC,IAAAA;AAA7B,MAAgDN,SAAS,EAA/D;AACA,QAAM,CAACO,qBAAD,EAAwBC,wBAAxB,IAAoDT,QAAQ,CAAC,KAAD,CAAlE;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIM,WAAW,CAACK,IAAZ,CAAiBC,KAArB,EAA4B;AAC1BL,MAAAA,YAAY,CAACD,WAAW,CAACK,IAAZ,CAAiBC,KAAlB,CAAZ;AACAJ,MAAAA,cAAc,CAACF,WAAW,CAACK,IAAZ,CAAiBC,KAAlB,CAAd;AACD;;AACDF,IAAAA,wBAAwB,CAACJ,WAAW,CAACO,YAAb,CAAxB;AAED,GAPQ,EAON,CAACP,WAAW,CAACK,IAAZ,CAAiBC,KAAlB,CAPM,CAAT;AAWA,sBAEE;AAAA,cACGH,qBAAqB,gBACpB,QAAC,CAAD,CAAG,WAAH;AACA;AACE,MAAA,oBAAoB,EAAC,aAFvB;AAGE,MAAA,yBAAyB,EAAC,aAH5B;AAAA,8BAKE,QAAC,CAAD,CAAG,cAAH;AAAA,gCACE,QAAC,CAAD,CAAG,UAAH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,CAAD,CAAG,UAAH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cALF,eASE,QAAC,CAAD,CAAG,eAAH;AAAA,+BACE,QAAC,CAAD,CAAG,WAAH;AAAA,oBACGH,WAAW,CAACO,YAAZ,CAAyBC,GAAzB,CAA8BC,IAAD,iBAC9B,QAAC,cAAD;AAEA,YAAA,IAAI,EAAEA,IAAI,CAACC,IAFX;AAGA,YAAA,UAAU,EAAED,IAAI,CAACE,SAHjB;AAIA,YAAA,QAAQ,EAAEF,IAAI,CAACE;AAJf,aACKF,IAAI,CAACG,EADV;AAAA;AAAA;AAAA;AAAA,kBADC;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cATF,eAqBE,QAAC,CAAD,CAAG,eAAH;AAAA,+BACA,QAAC,CAAD,CAAG,WAAH;AAAA,oBACKZ,WAAW,CAACa,OAAZ,CAAoBL,GAApB,CAAyBC,IAAD,iBACzB,QAAC,cAAD;AAEA,YAAA,IAAI,EAAEA,IAAI,CAACC,IAFX;AAGA,YAAA,UAAU,EAAED,IAAI,CAACK,QAHjB;AAIA,YAAA,QAAQ,EAAEL,IAAI,CAACE;AAJf,aACKF,IAAI,CAACG,EADV;AAAA;AAAA;AAAA;AAAA,kBADC;AADL;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,cArBF;AAAA;AAAA;AAAA;AAAA;AAAA,YADoB,gBAqCpB;AAtCJ,mBAFF;AA4CD,CA3DM;;GAAMb,Y;UAC2CH,S;;;KAD3CG,Y","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport { useGitHub } from '../../hooks/github_hooks';\nimport { RepositoryItem } from '../Repository_item';\nimport * as S from './styled';\n\n\nexport const Repositories = () => {\n  const { gitHubState, getUserRepos, getUserStarred } = useGitHub();\n  const [hasUserForSearchRepos, setHasUserForSearchRepos] = useState(false);\n\n  useEffect(() => {\n    if (gitHubState.user.login) {\n      getUserRepos(gitHubState.user.login);\n      getUserStarred(gitHubState.user.login);\n    }\n    setHasUserForSearchRepos(gitHubState.repositories);\n\n  }, [gitHubState.user.login]);\n\n\n\n  return ( \n\n    <>\n      {hasUserForSearchRepos ? (\n        <S.WrapperTabs\n        // react-tab-npm faz ser exibida qual tab foi clicada Repositories || Starred; \n          selectedTabClassName=\"is-selected\"\n          selectedTabPanelClassName=\"is-selected\"\n        >\n          <S.WrapperTabList>\n            <S.WrapperTab>Repositories</S.WrapperTab>\n            <S.WrapperTab>Starred</S.WrapperTab>\n          </S.WrapperTabList>\n          <S.WrapperTabPanel>\n            <S.WrapperList>\n              {gitHubState.repositories.map((item) => (\n              <RepositoryItem\n              key={item.id}\n              name={item.name}\n              linkToRepo={item.full_name}\n              fullName={item.full_name}\n              />\n              ))}\n            </S.WrapperList>  \n          </S.WrapperTabPanel>\n          <S.WrapperTabPanel>\n          <S.WrapperList>\n              {gitHubState.starred.map((item) => (\n              <RepositoryItem\n              key={item.id}\n              name={item.name}\n              linkToRepo={item.html_url}\n              fullName={item.full_name}\n              />\n              ))}\n            </S.WrapperList>\n          </S.WrapperTabPanel>\n        </S.WrapperTabs>\n      ) : \n      (\n        <></>\n      )}  \n    </>  \n  );\n};\n\n"]},"metadata":{},"sourceType":"module"}